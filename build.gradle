import java.nio.file.Files

buildscript {
    repositories {
        mavenCentral()
        maven { url "http://clojars.org/repo" }
    }

    dependencies {
        classpath 'clojuresque:clojuresque:1.+'
        classpath 'clojuresque:clojuresque-clojars:1.+'
    }
}

apply plugin: 'clojure'
apply plugin: 'clojars'

version = '0.0.1'

repositories {
    mavenCentral()
    clojarsRepo()
}

dependencies {
    compile "org.clojure:clojure:1.+"
    compile files(fileTree("lib").findAll { it.name.endsWith(".jar") })
}

compileClojure {
    aotCompile = true
}

task createRuntimeEnvironment {
    def ideaConfigRoot = "${project.rootDir.canonicalPath}/.runner"
    def systemDir = "$ideaConfigRoot/system"
    def configDir = "$ideaConfigRoot/config"
    def pluginDir = "$ideaConfigRoot/config/plugins/collagen"
    outputs.files files(["$pluginDir/org", "$pluginDir/META-INF"])

    doFirst {
        [systemDir, configDir, pluginDir].each { new File(it).mkdirs() }

        Files.createSymbolicLink(getPath("$pluginDir/org"), getPath("../../../../build/classes/main/org"));
        Files.createSymbolicLink(getPath("$pluginDir/META-INF"), getPath("../../../../build/resources/main/META-INF"))
    }
}

task runIdea(type: Exec, dependsOn: [build, createRuntimeEnvironment]) {
    def ideaLibDir = "/Applications/IntelliJ IDEA 13.app/lib"
    def javaLibDir = "/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib"

    def projectRoot = project.rootDir.canonicalPath
    def ideaConfigRoot = "${projectRoot}/.runner"
    def systemDir = "$ideaConfigRoot/system"
    def configDir = "$ideaConfigRoot/config"
    def ideaClassName = "com.intellij.idea.Main"

    def classPath = (fileTree(ideaLibDir) + fileTree(javaLibDir))
            .findAll{it.name.endsWith(".jar")}*.absolutePath
    classPath += "$projectRoot/build/classes/main"

    configurations.runtime.each { classPath += it }

    def joinedClassPath = System.getProperty('java.class.path') +
            File.pathSeparator + classPath.join(File.pathSeparator)

    args = ["-Xmx800m", "-XX:ReservedCodeCacheSize=64m", "-XX:MaxPermSize=250m",
            "-XX:+HeapDumpOnOutOfMemoryError", "-ea", "-Didea.is.internal=true",
            "-Didea.debug.mode=true",
            "-Didea.system.path=${systemDir}",
            "-Didea.config.path=${configDir}",
            "-Dapple.laf.useScreenMenuBar=true",
            "-Dplugin.path=${projectRoot}/build/resources/main",
            "-classpath", joinedClassPath,
            ideaClassName]

    executable = "java"
}

java.nio.file.Path getPath(String path) {
    new File(path).toPath()
}
